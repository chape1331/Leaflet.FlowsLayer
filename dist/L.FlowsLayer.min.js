/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/L.FlowsLayer.js":
/*!*****************************!*\
  !*** ./src/L.FlowsLayer.js ***!
  \*****************************/
/***/ ((module) => {

eval("/**\r\n * class L.FlowLayer()\r\n * \r\n * (extends L.GeoJSON)\r\n * \r\n * <DESCRIPTION>\r\n * \r\n */\r\n\r\nL.FlowsLayer = L.GeoJSON.extend({\r\n    options: {\r\n        attributes: {},\r\n        style: {},\r\n    },\r\n\r\n    // variables for plugin scope\r\n    _defaultAttributes: {\r\n        id: \"id\",\r\n        value: \"value\"\r\n    },\r\n    _defaultStyle: {\r\n        color: \"#1f78b4\",\r\n        colorSelected: \"#e31a1c\",\r\n        weight: 2,\r\n        sizeFactor: 1,\r\n        opacity: 1.0,\r\n    },\r\n    _selectedIds: [],\r\n\r\n    // functions\r\n    onAdd: function(map) {\r\n        L.GeoJSON.prototype.onAdd.call(this, map);\r\n        this.setStyle();\r\n    },\r\n\r\n    setStyle: function () {\r\n        this._validateAttributes();\r\n        this._validateStyles();\r\n        let layers = this._layers;\r\n        let attributes = this.options.attributes;\r\n        let style = this.options.style;\r\n        for (let key in layers){\r\n            let layer = layers[key];\r\n            let id = layer.feature.properties[attributes.id]; \r\n            let weight = layer.feature.properties[attributes.value] * style.sizeFactor;\r\n            let styleCopy = Object.assign({}, style);\r\n            styleCopy.weight = weight;\r\n            var index = this._selectedIds.indexOf(id);\r\n            if (index != -1) {\r\n                layer.bringToFront();\r\n                index = index % style.colorSelected.length;\r\n                styleCopy.color = style.colorSelected[index];\r\n            }\r\n\r\n            layer.setStyle(styleCopy);\r\n        }\r\n    },\r\n\r\n    _validateAttributes: function() {\r\n        let attributes = this.options.attributes;\r\n        if (attributes == null | attributes == undefined) attributes = Object.assign({}, this._defaultAttributes);\r\n        else {\r\n            for (key in this._defaultAttributes){\r\n                if (!(key in attributes)) attributes[key] = this._defaultAttributes[key];\r\n            }\r\n        }\r\n    },\r\n\r\n    _validateStyles: function() {\r\n        let style = this.options.style;\r\n        if (typeof(style.colorSelected) == \"string\") style.colorSelected = [style.colorSelected]\r\n\r\n        if (style == null | style == undefined) style = Object.assign({}, this._defaultStyle);\r\n        else {\r\n            for (key in this._defaultStyle){\r\n                if (!(key in style)) style[key] = this._defaultStyle[key];\r\n            }\r\n        }\r\n    },\r\n\r\n    updateStyle: function(style){\r\n        this.options.style = style;\r\n        this.setStyle();\r\n    },\r\n\r\n    updateAttributes: function(attributes){\r\n        this.options.attributes = attributes;\r\n        this.setStyle();\r\n    },\r\n\r\n    selectFeature: function(id, clear=false) {\r\n        if (clear) this.clearSelection();\r\n        if (this._selectedIds.indexOf(id) == -1) {this._selectedIds.push(id)};\r\n\r\n        this.setStyle();\r\n    },\r\n\r\n    unselectFeature: function(id) {\r\n        const index = this._selectedIds.indexOf(id);\r\n        if (index == -1) this._selectedIds.splice(index, 1);\r\n\r\n        this.setStyle();\r\n    },\r\n\r\n    clearSelection: function() {\r\n        delete(this._selectedIds);\r\n        this._selectedIds = [];\r\n\r\n        this.setStyle();\r\n    },\r\n\r\n    getSelected: function() {\r\n        let selection = {};\r\n        let style = this.options.style;\r\n\r\n        for (i in this._selectedIds) {\r\n            let item = this._selectedIds[i];\r\n            let index = this._selectedIds.indexOf(item);\r\n            index = index % style.colorSelected.length;\r\n            selection[item] = style.colorSelected[index]; \r\n        }\r\n\r\n        return selection;\r\n    },\r\n});\r\n\r\nL.flowsLayer = function (geojson, options) {\r\n    return new L.FlowsLayer(geojson, options);\r\n}\r\n\r\nmodule.exports = L.flowsLayer;\n\n//# sourceURL=webpack://leaflet.flowslayer/./src/L.FlowsLayer.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/L.FlowsLayer.js");
/******/ 	
/******/ })()
;